type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrderCreated @entity(immutable: true) {
  id: Bytes!
  orderId: BigInt! # uint40
  owner: Bytes! # address
  size: BigInt! # uint96
  price: Int! # uint24
  isBuy: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrdersCanceled @entity(immutable: true) {
  id: Bytes!
  orderId: [BigInt!]! # uint40[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrdersUpdated @entity(immutable: true) {
  id: Bytes!
  orderIds: [BigInt!]! # uint40[]
  updatedSizes: [BigInt!]! # uint96[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Trade @entity(immutable: true) {
  id: Bytes!
  orderId: BigInt! # uint40
  updatedSize: BigInt! # uint96
  takerAddress: Bytes! # address
  filledSize: BigInt! # uint96
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type RouterInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketRegistered @entity(immutable: true) {
  id: Bytes!
  baseAsset: Bytes! # address
  quoteAsset: Bytes! # address
  market: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarketUpdated @entity(immutable: true) {
  id: Bytes!
  baseAsset: Bytes! # address
  quoteAsset: Bytes! # address
  market: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RouterOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
